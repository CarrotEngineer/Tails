buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

project.ext {
    massive = "1"
    major = "5"
    minor = "0"
    mcVersion = "1.8.8"
    forgeVersion = "11.15.0.1639"
    foxlibDevVersion = "1.7.10-0.6.0.develop.22"
    foxlibVersion = "1.8-0.8.0"
    buildVersion = System.getenv("BUILD_NUMBER")
}

minecraft {
    version = "${project.ext.mcVersion}-${project.ext.forgeVersion}-${project.ext.mcVersion}"
    runDir = "run"
    mappings = "snapshot_20151228"

    replace '@VERSION@', project.version
    replace '@FOXLIBVERSION@', project.foxlibVersion
}

configurations {
    deployerJars
    all {
        resolutionStrategy.cacheChangingModulesFor 1, 'seconds'
    }
}

processResources
        {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'version':project.version, 'mcversion':project.minecraft.version
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }

project.version = "${project.ext.mcVersion}-${project.ext.massive}.${project.ext.major}.${project.minor}"
if (project.hasProperty("teamcity") && project.ext.buildVersion != null && teamcity["maven_release"] == null) {
    version = version + ".${System.getenv("BUILD_NUMBER")}"
}

jar {
    manifest {
        attributes 'FMLCorePlugin': 'kihira.tails.common.FoxLibManager',
                'FMLCorePluginContainsFMLMod': 'true'
    }
}

idea {
    module {
        inheritOutputDirs = true
    }
}